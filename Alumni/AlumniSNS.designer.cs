#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Alumni
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AlumniSNS")]
	public partial class SNSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertEmployCategory(AlumniSNSDB.EmployCategory instance);
    partial void UpdateEmployCategory(AlumniSNSDB.EmployCategory instance);
    partial void DeleteEmployCategory(AlumniSNSDB.EmployCategory instance);
    partial void InsertWorkplaceNature(AlumniSNSDB.WorkplaceNature instance);
    partial void UpdateWorkplaceNature(AlumniSNSDB.WorkplaceNature instance);
    partial void DeleteWorkplaceNature(AlumniSNSDB.WorkplaceNature instance);
    partial void InsertEnrollProgram(AlumniSNSDB.EnrollProgram instance);
    partial void UpdateEnrollProgram(AlumniSNSDB.EnrollProgram instance);
    partial void DeleteEnrollProgram(AlumniSNSDB.EnrollProgram instance);
    partial void InsertEnrollSchool(AlumniSNSDB.EnrollSchool instance);
    partial void UpdateEnrollSchool(AlumniSNSDB.EnrollSchool instance);
    partial void DeleteEnrollSchool(AlumniSNSDB.EnrollSchool instance);
    partial void InsertLiveCity(AlumniSNSDB.LiveCity instance);
    partial void UpdateLiveCity(AlumniSNSDB.LiveCity instance);
    partial void DeleteLiveCity(AlumniSNSDB.LiveCity instance);
    partial void InsertLiveProvince(AlumniSNSDB.LiveProvince instance);
    partial void UpdateLiveProvince(AlumniSNSDB.LiveProvince instance);
    partial void DeleteLiveProvince(AlumniSNSDB.LiveProvince instance);
    partial void InsertUser(AlumniSNSDB.User instance);
    partial void UpdateUser(AlumniSNSDB.User instance);
    partial void DeleteUser(AlumniSNSDB.User instance);
    #endregion
		
		public SNSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AlumniSNSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SNSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.EmployCategory> EmployCategory
		{
			get
			{
				return this.GetTable<AlumniSNSDB.EmployCategory>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.WorkplaceNature> WorkplaceNature
		{
			get
			{
				return this.GetTable<AlumniSNSDB.WorkplaceNature>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.EnrollProgram> EnrollProgram
		{
			get
			{
				return this.GetTable<AlumniSNSDB.EnrollProgram>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.EnrollSchool> EnrollSchool
		{
			get
			{
				return this.GetTable<AlumniSNSDB.EnrollSchool>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.LiveCity> LiveCity
		{
			get
			{
				return this.GetTable<AlumniSNSDB.LiveCity>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.LiveProvince> LiveProvince
		{
			get
			{
				return this.GetTable<AlumniSNSDB.LiveProvince>();
			}
		}
		
		public System.Data.Linq.Table<AlumniSNSDB.User> User
		{
			get
			{
				return this.GetTable<AlumniSNSDB.User>();
			}
		}
	}
}
namespace AlumniSNSDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployCategory")]
	public partial class EmployCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public EmployCategory()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployCategory_User", Storage="_User", ThisKey="CategoryID", OtherKey="EmployCategoryID")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.EmployCategory = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.EmployCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkplaceNature")]
	public partial class WorkplaceNature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NatureID;
		
		private int _NatureCode;
		
		private string _NatureName;
		
		private EntitySet<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNatureIDChanging(int value);
    partial void OnNatureIDChanged();
    partial void OnNatureCodeChanging(int value);
    partial void OnNatureCodeChanged();
    partial void OnNatureNameChanging(string value);
    partial void OnNatureNameChanged();
    #endregion
		
		public WorkplaceNature()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NatureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NatureID
		{
			get
			{
				return this._NatureID;
			}
			set
			{
				if ((this._NatureID != value))
				{
					this.OnNatureIDChanging(value);
					this.SendPropertyChanging();
					this._NatureID = value;
					this.SendPropertyChanged("NatureID");
					this.OnNatureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NatureCode", DbType="Int NOT NULL")]
		public int NatureCode
		{
			get
			{
				return this._NatureCode;
			}
			set
			{
				if ((this._NatureCode != value))
				{
					this.OnNatureCodeChanging(value);
					this.SendPropertyChanging();
					this._NatureCode = value;
					this.SendPropertyChanged("NatureCode");
					this.OnNatureCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NatureName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NatureName
		{
			get
			{
				return this._NatureName;
			}
			set
			{
				if ((this._NatureName != value))
				{
					this.OnNatureNameChanging(value);
					this.SendPropertyChanging();
					this._NatureName = value;
					this.SendPropertyChanged("NatureName");
					this.OnNatureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkplaceNature_User", Storage="_User", ThisKey="NatureID", OtherKey="WorkplaceNatureID")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.WorkplaceNature = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.WorkplaceNature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollProgram")]
	public partial class EnrollProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramID;
		
		private int _SchoolID;
		
		private string _ProgramName;
		
		private EntitySet<User> _User;
		
		private EntityRef<EnrollSchool> _EnrollSchool;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramIDChanging(int value);
    partial void OnProgramIDChanged();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnProgramNameChanging(string value);
    partial void OnProgramNameChanged();
    #endregion
		
		public EnrollProgram()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			this._EnrollSchool = default(EntityRef<EnrollSchool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramID
		{
			get
			{
				return this._ProgramID;
			}
			set
			{
				if ((this._ProgramID != value))
				{
					this.OnProgramIDChanging(value);
					this.SendPropertyChanging();
					this._ProgramID = value;
					this.SendPropertyChanged("ProgramID");
					this.OnProgramIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int NOT NULL")]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._EnrollSchool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProgramName
		{
			get
			{
				return this._ProgramName;
			}
			set
			{
				if ((this._ProgramName != value))
				{
					this.OnProgramNameChanging(value);
					this.SendPropertyChanging();
					this._ProgramName = value;
					this.SendPropertyChanged("ProgramName");
					this.OnProgramNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollProgram_User", Storage="_User", ThisKey="ProgramID", OtherKey="EnrollProgramID")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollSchool_EnrollProgram", Storage="_EnrollSchool", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EnrollSchool EnrollSchool
		{
			get
			{
				return this._EnrollSchool.Entity;
			}
			set
			{
				EnrollSchool previousValue = this._EnrollSchool.Entity;
				if (((previousValue != value) 
							|| (this._EnrollSchool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnrollSchool.Entity = null;
						previousValue.EnrollProgram.Remove(this);
					}
					this._EnrollSchool.Entity = value;
					if ((value != null))
					{
						value.EnrollProgram.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(int);
					}
					this.SendPropertyChanged("EnrollSchool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.EnrollProgram = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.EnrollProgram = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollSchool")]
	public partial class EnrollSchool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolID;
		
		private string _SchoolName;
		
		private EntitySet<EnrollProgram> _EnrollProgram;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    #endregion
		
		public EnrollSchool()
		{
			this._EnrollProgram = new EntitySet<EnrollProgram>(new Action<EnrollProgram>(this.attach_EnrollProgram), new Action<EnrollProgram>(this.detach_EnrollProgram));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollSchool_EnrollProgram", Storage="_EnrollProgram", ThisKey="SchoolID", OtherKey="SchoolID")]
		public EntitySet<EnrollProgram> EnrollProgram
		{
			get
			{
				return this._EnrollProgram;
			}
			set
			{
				this._EnrollProgram.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnrollProgram(EnrollProgram entity)
		{
			this.SendPropertyChanging();
			entity.EnrollSchool = this;
		}
		
		private void detach_EnrollProgram(EnrollProgram entity)
		{
			this.SendPropertyChanging();
			entity.EnrollSchool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiveCity")]
	public partial class LiveCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private int _ProvinceID;
		
		private string _CityName;
		
		private EntitySet<User> _User;
		
		private EntityRef<LiveProvince> _LiveProvince;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public LiveCity()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			this._LiveProvince = default(EntityRef<LiveProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._LiveProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveCity_User", Storage="_User", ThisKey="CityID", OtherKey="LiveCityID")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveProvince_LiveCity", Storage="_LiveProvince", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LiveProvince LiveProvince
		{
			get
			{
				return this._LiveProvince.Entity;
			}
			set
			{
				LiveProvince previousValue = this._LiveProvince.Entity;
				if (((previousValue != value) 
							|| (this._LiveProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveProvince.Entity = null;
						previousValue.LiveCity.Remove(this);
					}
					this._LiveProvince.Entity = value;
					if ((value != null))
					{
						value.LiveCity.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(int);
					}
					this.SendPropertyChanged("LiveProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.LiveCity = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.LiveCity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiveProvince")]
	public partial class LiveProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceID;
		
		private string _ProvinceName;
		
		private EntitySet<LiveCity> _LiveCity;
		
		private EntitySet<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    #endregion
		
		public LiveProvince()
		{
			this._LiveCity = new EntitySet<LiveCity>(new Action<LiveCity>(this.attach_LiveCity), new Action<LiveCity>(this.detach_LiveCity));
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveProvince_LiveCity", Storage="_LiveCity", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<LiveCity> LiveCity
		{
			get
			{
				return this._LiveCity;
			}
			set
			{
				this._LiveCity.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveProvince_User", Storage="_User", ThisKey="ProvinceID", OtherKey="LiveProvinceID")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiveCity(LiveCity entity)
		{
			this.SendPropertyChanging();
			entity.LiveProvince = this;
		}
		
		private void detach_LiveCity(LiveCity entity)
		{
			this.SendPropertyChanging();
			entity.LiveProvince = null;
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.LiveProvince = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.LiveProvince = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _PassWord;
		
		private string _Name;
		
		private System.Nullable<int> _Sex;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private int _LiveProvinceID;
		
		private System.Nullable<int> _LiveCityID;
		
		private int _EmployCategoryID;
		
		private System.Nullable<int> _WorkplaceNatureID;
		
		private string _WorkplaceName;
		
		private string _WorkTitle;
		
		private string _MailingAddress;
		
		private string _FixedPhone;
		
		private string _MobilePhone;
		
		private string _EMail;
		
		private string _QQNo;
		
		private string _WeChatID;
		
		private string _ClassNo;
		
		private string _StudentNo;
		
		private int _EnrollYear;
		
		private int _EnrollProgramID;
		
		private System.Nullable<int> _GraduateYear;
		
		private EntityRef<EmployCategory> _EmployCategory;
		
		private EntityRef<EnrollProgram> _EnrollProgram;
		
		private EntityRef<LiveCity> _LiveCity;
		
		private EntityRef<LiveProvince> _LiveProvince;
		
		private EntityRef<WorkplaceNature> _WorkplaceNature;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(System.Nullable<int> value);
    partial void OnSexChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnLiveProvinceIDChanging(int value);
    partial void OnLiveProvinceIDChanged();
    partial void OnLiveCityIDChanging(System.Nullable<int> value);
    partial void OnLiveCityIDChanged();
    partial void OnEmployCategoryIDChanging(int value);
    partial void OnEmployCategoryIDChanged();
    partial void OnWorkplaceNatureIDChanging(System.Nullable<int> value);
    partial void OnWorkplaceNatureIDChanged();
    partial void OnWorkplaceNameChanging(string value);
    partial void OnWorkplaceNameChanged();
    partial void OnWorkTitleChanging(string value);
    partial void OnWorkTitleChanged();
    partial void OnMailingAddressChanging(string value);
    partial void OnMailingAddressChanged();
    partial void OnFixedPhoneChanging(string value);
    partial void OnFixedPhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnQQNoChanging(string value);
    partial void OnQQNoChanged();
    partial void OnWeChatIDChanging(string value);
    partial void OnWeChatIDChanged();
    partial void OnClassNoChanging(string value);
    partial void OnClassNoChanged();
    partial void OnStudentNoChanging(string value);
    partial void OnStudentNoChanged();
    partial void OnEnrollYearChanging(int value);
    partial void OnEnrollYearChanged();
    partial void OnEnrollProgramIDChanging(int value);
    partial void OnEnrollProgramIDChanged();
    partial void OnGraduateYearChanging(System.Nullable<int> value);
    partial void OnGraduateYearChanged();
    #endregion
		
		public User()
		{
			this._EmployCategory = default(EntityRef<EmployCategory>);
			this._EnrollProgram = default(EntityRef<EnrollProgram>);
			this._LiveCity = default(EntityRef<LiveCity>);
			this._LiveProvince = default(EntityRef<LiveProvince>);
			this._WorkplaceNature = default(EntityRef<WorkplaceNature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Int")]
		public System.Nullable<int> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveProvinceID", DbType="Int NOT NULL")]
		public int LiveProvinceID
		{
			get
			{
				return this._LiveProvinceID;
			}
			set
			{
				if ((this._LiveProvinceID != value))
				{
					if (this._LiveProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLiveProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._LiveProvinceID = value;
					this.SendPropertyChanged("LiveProvinceID");
					this.OnLiveProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveCityID", DbType="Int")]
		public System.Nullable<int> LiveCityID
		{
			get
			{
				return this._LiveCityID;
			}
			set
			{
				if ((this._LiveCityID != value))
				{
					if (this._LiveCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLiveCityIDChanging(value);
					this.SendPropertyChanging();
					this._LiveCityID = value;
					this.SendPropertyChanged("LiveCityID");
					this.OnLiveCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployCategoryID", DbType="Int NOT NULL")]
		public int EmployCategoryID
		{
			get
			{
				return this._EmployCategoryID;
			}
			set
			{
				if ((this._EmployCategoryID != value))
				{
					if (this._EmployCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._EmployCategoryID = value;
					this.SendPropertyChanged("EmployCategoryID");
					this.OnEmployCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkplaceNatureID", DbType="Int")]
		public System.Nullable<int> WorkplaceNatureID
		{
			get
			{
				return this._WorkplaceNatureID;
			}
			set
			{
				if ((this._WorkplaceNatureID != value))
				{
					if (this._WorkplaceNature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkplaceNatureIDChanging(value);
					this.SendPropertyChanging();
					this._WorkplaceNatureID = value;
					this.SendPropertyChanged("WorkplaceNatureID");
					this.OnWorkplaceNatureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkplaceName", DbType="NVarChar(100)")]
		public string WorkplaceName
		{
			get
			{
				return this._WorkplaceName;
			}
			set
			{
				if ((this._WorkplaceName != value))
				{
					this.OnWorkplaceNameChanging(value);
					this.SendPropertyChanging();
					this._WorkplaceName = value;
					this.SendPropertyChanged("WorkplaceName");
					this.OnWorkplaceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkTitle", DbType="NVarChar(50)")]
		public string WorkTitle
		{
			get
			{
				return this._WorkTitle;
			}
			set
			{
				if ((this._WorkTitle != value))
				{
					this.OnWorkTitleChanging(value);
					this.SendPropertyChanging();
					this._WorkTitle = value;
					this.SendPropertyChanged("WorkTitle");
					this.OnWorkTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailingAddress", DbType="NVarChar(MAX)")]
		public string MailingAddress
		{
			get
			{
				return this._MailingAddress;
			}
			set
			{
				if ((this._MailingAddress != value))
				{
					this.OnMailingAddressChanging(value);
					this.SendPropertyChanging();
					this._MailingAddress = value;
					this.SendPropertyChanged("MailingAddress");
					this.OnMailingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedPhone", DbType="NVarChar(20)")]
		public string FixedPhone
		{
			get
			{
				return this._FixedPhone;
			}
			set
			{
				if ((this._FixedPhone != value))
				{
					this.OnFixedPhoneChanging(value);
					this.SendPropertyChanging();
					this._FixedPhone = value;
					this.SendPropertyChanged("FixedPhone");
					this.OnFixedPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(100)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QQNo", DbType="NVarChar(20)")]
		public string QQNo
		{
			get
			{
				return this._QQNo;
			}
			set
			{
				if ((this._QQNo != value))
				{
					this.OnQQNoChanging(value);
					this.SendPropertyChanging();
					this._QQNo = value;
					this.SendPropertyChanged("QQNo");
					this.OnQQNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeChatID", DbType="NVarChar(50)")]
		public string WeChatID
		{
			get
			{
				return this._WeChatID;
			}
			set
			{
				if ((this._WeChatID != value))
				{
					this.OnWeChatIDChanging(value);
					this.SendPropertyChanging();
					this._WeChatID = value;
					this.SendPropertyChanged("WeChatID");
					this.OnWeChatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassNo", DbType="NVarChar(20)")]
		public string ClassNo
		{
			get
			{
				return this._ClassNo;
			}
			set
			{
				if ((this._ClassNo != value))
				{
					this.OnClassNoChanging(value);
					this.SendPropertyChanging();
					this._ClassNo = value;
					this.SendPropertyChanged("ClassNo");
					this.OnClassNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNo", DbType="NVarChar(30)")]
		public string StudentNo
		{
			get
			{
				return this._StudentNo;
			}
			set
			{
				if ((this._StudentNo != value))
				{
					this.OnStudentNoChanging(value);
					this.SendPropertyChanging();
					this._StudentNo = value;
					this.SendPropertyChanged("StudentNo");
					this.OnStudentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollYear", DbType="Int NOT NULL")]
		public int EnrollYear
		{
			get
			{
				return this._EnrollYear;
			}
			set
			{
				if ((this._EnrollYear != value))
				{
					this.OnEnrollYearChanging(value);
					this.SendPropertyChanging();
					this._EnrollYear = value;
					this.SendPropertyChanged("EnrollYear");
					this.OnEnrollYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollProgramID", DbType="Int NOT NULL")]
		public int EnrollProgramID
		{
			get
			{
				return this._EnrollProgramID;
			}
			set
			{
				if ((this._EnrollProgramID != value))
				{
					if (this._EnrollProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollProgramIDChanging(value);
					this.SendPropertyChanging();
					this._EnrollProgramID = value;
					this.SendPropertyChanged("EnrollProgramID");
					this.OnEnrollProgramIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraduateYear", DbType="Int")]
		public System.Nullable<int> GraduateYear
		{
			get
			{
				return this._GraduateYear;
			}
			set
			{
				if ((this._GraduateYear != value))
				{
					this.OnGraduateYearChanging(value);
					this.SendPropertyChanging();
					this._GraduateYear = value;
					this.SendPropertyChanged("GraduateYear");
					this.OnGraduateYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployCategory_User", Storage="_EmployCategory", ThisKey="EmployCategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public EmployCategory EmployCategory
		{
			get
			{
				return this._EmployCategory.Entity;
			}
			set
			{
				EmployCategory previousValue = this._EmployCategory.Entity;
				if (((previousValue != value) 
							|| (this._EmployCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployCategory.Entity = null;
						previousValue.User.Remove(this);
					}
					this._EmployCategory.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._EmployCategoryID = value.CategoryID;
					}
					else
					{
						this._EmployCategoryID = default(int);
					}
					this.SendPropertyChanged("EmployCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollProgram_User", Storage="_EnrollProgram", ThisKey="EnrollProgramID", OtherKey="ProgramID", IsForeignKey=true)]
		public EnrollProgram EnrollProgram
		{
			get
			{
				return this._EnrollProgram.Entity;
			}
			set
			{
				EnrollProgram previousValue = this._EnrollProgram.Entity;
				if (((previousValue != value) 
							|| (this._EnrollProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnrollProgram.Entity = null;
						previousValue.User.Remove(this);
					}
					this._EnrollProgram.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._EnrollProgramID = value.ProgramID;
					}
					else
					{
						this._EnrollProgramID = default(int);
					}
					this.SendPropertyChanged("EnrollProgram");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveCity_User", Storage="_LiveCity", ThisKey="LiveCityID", OtherKey="CityID", IsForeignKey=true)]
		public LiveCity LiveCity
		{
			get
			{
				return this._LiveCity.Entity;
			}
			set
			{
				LiveCity previousValue = this._LiveCity.Entity;
				if (((previousValue != value) 
							|| (this._LiveCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveCity.Entity = null;
						previousValue.User.Remove(this);
					}
					this._LiveCity.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._LiveCityID = value.CityID;
					}
					else
					{
						this._LiveCityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LiveCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveProvince_User", Storage="_LiveProvince", ThisKey="LiveProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public LiveProvince LiveProvince
		{
			get
			{
				return this._LiveProvince.Entity;
			}
			set
			{
				LiveProvince previousValue = this._LiveProvince.Entity;
				if (((previousValue != value) 
							|| (this._LiveProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveProvince.Entity = null;
						previousValue.User.Remove(this);
					}
					this._LiveProvince.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._LiveProvinceID = value.ProvinceID;
					}
					else
					{
						this._LiveProvinceID = default(int);
					}
					this.SendPropertyChanged("LiveProvince");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkplaceNature_User", Storage="_WorkplaceNature", ThisKey="WorkplaceNatureID", OtherKey="NatureID", IsForeignKey=true)]
		public WorkplaceNature WorkplaceNature
		{
			get
			{
				return this._WorkplaceNature.Entity;
			}
			set
			{
				WorkplaceNature previousValue = this._WorkplaceNature.Entity;
				if (((previousValue != value) 
							|| (this._WorkplaceNature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkplaceNature.Entity = null;
						previousValue.User.Remove(this);
					}
					this._WorkplaceNature.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._WorkplaceNatureID = value.NatureID;
					}
					else
					{
						this._WorkplaceNatureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("WorkplaceNature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
